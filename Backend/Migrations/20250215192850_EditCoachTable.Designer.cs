// <auto-generated />
using System;
using Backend.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250215192850_EditCoachTable")]
    partial class EditCoachTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.DbModels.Announcement", b =>
                {
                    b.Property<int>("AnnouncementsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Announcements_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AnnouncementsID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("int")
                        .HasColumnName("Author_ID");

                    b.Property<string>("AuthorRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Author_Role");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_Posted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AnnouncementsID");

                    b.HasIndex("AuthorID");

                    b.ToTable("Announcements", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Application", b =>
                {
                    b.Property<int>("ApplicantID")
                        .HasColumnType("int")
                        .HasColumnName("Applicant_ID");

                    b.Property<int>("PostID")
                        .HasColumnType("int")
                        .HasColumnName("Post_ID");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Applied_Date");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int")
                        .HasColumnName("Years_of_Experience");

                    b.HasKey("ApplicantID", "PostID");

                    b.HasIndex("PostID");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Branch_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BranchID"));

                    b.Property<int>("Branch_Manager_ID")
                        .HasColumnType("int");

                    b.Property<string>("Branch_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<TimeOnly>("Closing_Hour")
                        .HasColumnType("TIME");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<TimeOnly>("Opening_Hour")
                        .HasColumnType("TIME");

                    b.HasKey("BranchID");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Branch_Manager", b =>
                {
                    b.Property<int>("Branch_ManagerID")
                        .HasColumnType("int")
                        .HasColumnName("Branch_Manager_ID");

                    b.Property<int?>("Bonuses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("Contract_Length")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<int>("Employee_Under_Supervision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateOnly?>("Fire_Date")
                        .HasColumnType("DATE");

                    b.Property<DateOnly>("Hire_Date")
                        .HasColumnType("DATE");

                    b.Property<int?>("Manages_Branch_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Penalties")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateOnly?>("Renewal_Date")
                        .HasColumnType("DATE");

                    b.Property<decimal>("Salary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(5000m);

                    b.HasKey("Branch_ManagerID");

                    b.HasIndex("BranchID");

                    b.HasIndex("Manages_Branch_ID")
                        .IsUnique();

                    b.ToTable("Branch_Manager", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Candidate", b =>
                {
                    b.Property<int>("CandidateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Candidate_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CandidateID"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("First_Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("LinkedinAccountLink")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<long>("NationalNumber")
                        .HasMaxLength(18)
                        .HasColumnType("bigint")
                        .HasColumnName("National_Number");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("Phone_Number");

                    b.Property<string>("ResumeLink")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CandidateID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NationalNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Candidate", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .HasColumnType("int")
                        .HasColumnName("Client_ID");

                    b.Property<bool>("AccountActivated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("BMR")
                        .HasColumnType("int");

                    b.Property<int?>("BelongToCoachID")
                        .HasColumnType("int")
                        .HasColumnName("Belong_To_Coach_ID");

                    b.Property<DateOnly>("EndDateMembership")
                        .HasColumnType("date")
                        .HasColumnName("End_Date_Membership");

                    b.Property<int>("FeesOfMembership")
                        .HasColumnType("int")
                        .HasColumnName("Fees_Of_Membership");

                    b.Property<double?>("HeightCm")
                        .HasColumnType("double");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date")
                        .HasColumnName("Join_Date");

                    b.Property<int>("MembershipPeriodMonths")
                        .HasColumnType("int")
                        .HasColumnName("Membership_Period_Months");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Silver")
                        .HasColumnName("Membership_Type");

                    b.Property<DateOnly>("StartDateMembership")
                        .HasColumnType("date")
                        .HasColumnName("Start_Date_Membership");

                    b.Property<double?>("WeightKg")
                        .HasColumnType("double");

                    b.HasKey("ClientID");

                    b.HasIndex("BelongToCoachID");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.ClientProgress", b =>
                {
                    b.Property<int>("ClientProgressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Client_Progress_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClientProgressID"));

                    b.Property<string>("ChallengesFaced")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ClientID")
                        .HasColumnType("int")
                        .HasColumnName("Client_ID");

                    b.Property<int?>("CoachID")
                        .HasColumnType("int")
                        .HasColumnName("Coach_ID");

                    b.Property<string>("GoalsAchieved")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NextSteps")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("ProgressSummary")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ClientProgressID");

                    b.HasIndex("ClientID");

                    b.HasIndex("CoachID");

                    b.ToTable("ClientProgress", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Coach", b =>
                {
                    b.Property<int>("CoachID")
                        .HasColumnType("int")
                        .HasColumnName("Coach_ID");

                    b.Property<int?>("Bonuses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("Contract_Length")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<int>("Daily_Hours_Worked")
                        .HasColumnType("int");

                    b.Property<int>("Experience_Years")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<DateOnly?>("Fire_Date")
                        .HasColumnType("DATE");

                    b.Property<DateOnly>("Hire_Date")
                        .HasColumnType("DATE");

                    b.Property<int?>("Penalties")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateOnly?>("Renewal_Date")
                        .HasColumnType("DATE");

                    b.Property<decimal>("Salary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(5000m);

                    b.Property<TimeOnly>("Shift_Ends")
                        .HasColumnType("TIME");

                    b.Property<TimeOnly>("Shift_Start")
                        .HasColumnType("TIME");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int?>("Works_For_Branch")
                        .HasColumnType("int");

                    b.HasKey("CoachID");

                    b.HasIndex("Works_For_Branch");

                    b.ToTable("Coach", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Diet", b =>
                {
                    b.Property<int>("NutritionPlanID")
                        .HasColumnType("int")
                        .HasColumnName("Nutrition_Plan_ID");

                    b.Property<int>("ClientAssignedToID")
                        .HasColumnType("int")
                        .HasColumnName("Client_Assigned_To_ID");

                    b.Property<int?>("CoachCreatedID")
                        .HasColumnType("int")
                        .HasColumnName("Coach_Created_ID");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("DATE")
                        .HasColumnName("End_Date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("DATE")
                        .HasColumnName("Start_Date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("Not choosed");

                    b.Property<int>("SupplementID")
                        .HasColumnType("int")
                        .HasColumnName("Supplement_ID");

                    b.HasKey("NutritionPlanID", "ClientAssignedToID");

                    b.HasIndex("ClientAssignedToID")
                        .IsUnique();

                    b.HasIndex("CoachCreatedID");

                    b.HasIndex("SupplementID");

                    b.ToTable("Diet", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Equipment", b =>
                {
                    b.Property<int>("EquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Equipment_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EquipmentID"));

                    b.Property<int?>("BelongToBranchID")
                        .HasColumnType("int")
                        .HasColumnName("Belong_to_Branch_ID");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Purchase_Date");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Purchase_Price");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Available");

                    b.HasKey("EquipmentID");

                    b.HasIndex("BelongToBranchID");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Equipment", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EventID"));

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int")
                        .HasColumnName("Created_By_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("End_Date");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Start_Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EventID");

                    b.HasIndex("CreatedByID");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Holiday", b =>
                {
                    b.Property<int>("HolidayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Holiday_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("HolidayID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("End_Date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Start_Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("HolidayID");

                    b.ToTable("Holiday", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Interested", b =>
                {
                    b.Property<int>("Client_ID")
                        .HasColumnType("int");

                    b.Property<int>("Session_ID")
                        .HasColumnType("int");

                    b.HasKey("Client_ID", "Session_ID");

                    b.HasIndex("Session_ID");

                    b.ToTable("Interested", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.InterviewTime", b =>
                {
                    b.Property<int>("InterviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Interview_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InterviewID"));

                    b.Property<DateTime>("FreeInterviewDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Free_Interview_Date");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int")
                        .HasColumnName("Manager_ID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("Available");

                    b.HasKey("InterviewID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Interview_Times", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Meeting", b =>
                {
                    b.Property<int>("MeetingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Meeting_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MeetingID"));

                    b.Property<int>("CoachID")
                        .HasColumnType("int")
                        .HasColumnName("Coach_ID");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("MeetingID");

                    b.HasIndex("CoachID");

                    b.ToTable("Meetings", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Nutrition", b =>
                {
                    b.Property<int>("NutritionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Nutrition_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NutritionID"));

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<int>("CarbohydratesGrams")
                        .HasColumnType("int")
                        .HasColumnName("Carbohydrates_grams");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("FatGrams")
                        .HasColumnType("int")
                        .HasColumnName("Fat_grams");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProteinGrams")
                        .HasColumnType("int")
                        .HasColumnName("Protein_grams");

                    b.HasKey("NutritionID");

                    b.ToTable("Nutrition", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Owner", b =>
                {
                    b.Property<int>("OwnerID")
                        .HasColumnType("int")
                        .HasColumnName("Owner_ID");

                    b.Property<int?>("Established_branches")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("SharePercentage")
                        .HasColumnType("int");

                    b.HasKey("OwnerID");

                    b.ToTable("Owner", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.PerformWorkout", b =>
                {
                    b.Property<int>("WorkoutID")
                        .HasColumnType("int")
                        .HasColumnName("Workout_ID");

                    b.Property<int>("ClientID")
                        .HasColumnType("int")
                        .HasColumnName("Client_ID");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int")
                        .HasColumnName("Day_Number");

                    b.Property<int>("OrderOfWorkout")
                        .HasColumnType("int")
                        .HasColumnName("Order_Of_Workout");

                    b.Property<bool>("Performed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WorkoutID", "ClientID");

                    b.HasIndex("ClientID");

                    b.ToTable("Perform_Workout", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Post_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PostID"));

                    b.Property<int?>("BranchPostedID")
                        .HasColumnType("int")
                        .HasColumnName("Branch_Posted_ID");

                    b.Property<DateTime>("DatePosted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Date_Posted")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ExperienceYearsRequired")
                        .HasColumnType("int")
                        .HasColumnName("Experience_Years_Required");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SkillsRequired")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Skills_Required");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PostID");

                    b.HasIndex("BranchPostedID");

                    b.ToTable("Job_Posting", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Progress", b =>
                {
                    b.Property<int>("ProgressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Progress_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProgressID"));

                    b.Property<int>("ClientID")
                        .HasColumnType("int")
                        .HasColumnName("Client_ID");

                    b.Property<DateTime>("DateInserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("WeightKg")
                        .HasColumnType("double")
                        .HasColumnName("Weight_Kg");

                    b.HasKey("ProgressID");

                    b.HasIndex("ClientID");

                    b.ToTable("Progress", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Rating_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<int?>("ClientID")
                        .HasColumnType("int")
                        .HasColumnName("Client_ID");

                    b.Property<int>("CoachID")
                        .HasColumnType("int")
                        .HasColumnName("Coach_ID");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("RatingID");

                    b.HasIndex("ClientID");

                    b.HasIndex("CoachID");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Recommendation", b =>
                {
                    b.Property<int>("RecommendationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Recommendation_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RecommendationID"));

                    b.Property<int>("ClientID")
                        .HasColumnType("int")
                        .HasColumnName("Client_ID");

                    b.Property<int?>("PlanID")
                        .HasColumnType("int")
                        .HasColumnName("Plan_ID");

                    b.Property<int?>("SupplementID")
                        .HasColumnType("int")
                        .HasColumnName("Supplement_ID");

                    b.HasKey("RecommendationID");

                    b.HasIndex("ClientID");

                    b.HasIndex("PlanID");

                    b.HasIndex("SupplementID");

                    b.ToTable("Recommendation", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Report_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateOnly>("GeneratedDate")
                        .HasColumnType("date")
                        .HasColumnName("Generated_Date");

                    b.Property<int?>("ManagerReportedID")
                        .HasColumnType("int")
                        .HasColumnName("Manager_Reported_ID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("To be sent");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Monthly Report");

                    b.HasKey("ReportID");

                    b.HasIndex("ManagerReportedID");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Session", b =>
                {
                    b.Property<int>("Session_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Session_ID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date_Time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Session_ID");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Skills", b =>
                {
                    b.Property<string>("SkillName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Skill_Name");

                    b.Property<int?>("CoachID")
                        .HasColumnType("int")
                        .HasColumnName("Coach_Skilled_ID");

                    b.HasKey("SkillName", "CoachID");

                    b.HasIndex("CoachID");

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Supplement", b =>
                {
                    b.Property<int>("SupplementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Supplement_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplementID"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("Expiration_Date");

                    b.Property<string>("Flavor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("No Flavor");

                    b.Property<DateOnly>("ManufacturedDate")
                        .HasColumnType("date")
                        .HasColumnName("Manufactured_Date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("Purchase_Date");

                    b.Property<decimal>("PurchasedPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Purchased_Price");

                    b.Property<string>("ScoopDetail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Scoop_Detail");

                    b.Property<int>("ScoopNumberPackage")
                        .HasColumnType("int")
                        .HasColumnName("Scoop_Number_package");

                    b.Property<int>("ScoopSizeGrams")
                        .HasColumnType("int")
                        .HasColumnName("Scoop_Size_grams");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Selling_Price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SupplementID");

                    b.ToTable("Supplements", null, t =>
                        {
                            t.HasCheckConstraint("CK_Flavor", "`Flavor` IN ('Vanilla', 'Chocolate', 'No Flavor')");

                            t.HasCheckConstraint("CK_ManufacturedDate_ExpirationDate", "`Manufactured_Date` < `Expiration_Date`");

                            t.HasCheckConstraint("CK_ScoopSize_ScoopNumber", "`Scoop_Size_grams` > 0 AND `Scoop_Number_package` > 0");

                            t.HasCheckConstraint("CK_SellingPrice_PurchasedPrice", "`Selling_Price` >= `Purchased_Price` AND `Purchased_Price` > 0");

                            t.HasCheckConstraint("CK_Type", "`Type` IN ('Protein', 'Vitamins', 'Creatine')");
                        });
                });

            modelBuilder.Entity("Backend.DbModels.SupplementsNeeded", b =>
                {
                    b.Property<int>("SupplementID")
                        .HasColumnType("int")
                        .HasColumnName("Supplement_ID");

                    b.Property<int>("NutritionPlanID")
                        .HasColumnType("int")
                        .HasColumnName("Nutrition_Plan_ID");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("End_Date");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ScoopsPerDayOfUsage")
                        .HasColumnType("int")
                        .HasColumnName("Scoops_Per_Day_Of_Usage");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("Start_Date");

                    b.HasKey("SupplementID", "NutritionPlanID");

                    b.HasIndex("NutritionPlanID");

                    b.ToTable("Supplements_Needed", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserID"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("National_Number")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHashed")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone_Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("National_Number")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Workout", b =>
                {
                    b.Property<int>("WorkoutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Workout_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WorkoutID"));

                    b.Property<int>("CaloriesBurnt")
                        .HasColumnType("int")
                        .HasColumnName("Calories_Burnt");

                    b.Property<int?>("CreatedByCoachID")
                        .HasColumnType("int")
                        .HasColumnName("Created_By_Coach_ID");

                    b.Property<int?>("DurationMin")
                        .HasColumnType("int")
                        .HasColumnName("Duration_Min");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MuscleTargeted")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Muscle_Targeted");

                    b.Property<int?>("RepsPerSet")
                        .HasColumnType("int")
                        .HasColumnName("Reps_Per_Set");

                    b.Property<int?>("Sets")
                        .HasColumnType("int");

                    b.HasKey("WorkoutID");

                    b.HasIndex("CreatedByCoachID");

                    b.ToTable("Workout", (string)null);
                });

            modelBuilder.Entity("BlacklistedToken", b =>
                {
                    b.Property<string>("Token")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Token");

                    b.ToTable("BlacklistedTokens", (string)null);
                });

            modelBuilder.Entity("Backend.DbModels.Announcement", b =>
                {
                    b.HasOne("Backend.DbModels.User", "Author")
                        .WithMany("Announcements")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Backend.DbModels.Application", b =>
                {
                    b.HasOne("Backend.DbModels.Candidate", "Candidate")
                        .WithMany("Application")
                        .HasForeignKey("ApplicantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.DbModels.Post", "Post")
                        .WithMany("Application")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Backend.DbModels.Branch_Manager", b =>
                {
                    b.HasOne("Backend.DbModels.Branch", null)
                        .WithMany("Branch_Managers")
                        .HasForeignKey("BranchID");

                    b.HasOne("Backend.DbModels.User", "User")
                        .WithOne()
                        .HasForeignKey("Backend.DbModels.Branch_Manager", "Branch_ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.DbModels.Branch", "Branch")
                        .WithOne()
                        .HasForeignKey("Backend.DbModels.Branch_Manager", "Manages_Branch_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.DbModels.Client", b =>
                {
                    b.HasOne("Backend.DbModels.Coach", "Coach")
                        .WithMany("Clients")
                        .HasForeignKey("BelongToCoachID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.DbModels.User", "User")
                        .WithOne()
                        .HasForeignKey("Backend.DbModels.Client", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.DbModels.ClientProgress", b =>
                {
                    b.HasOne("Backend.DbModels.Client", "Client")
                        .WithMany("ClientProgress")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.DbModels.Coach", "Coach")
                        .WithMany("ClientProgress")
                        .HasForeignKey("CoachID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Backend.DbModels.Coach", b =>
                {
                    b.HasOne("Backend.DbModels.User", "User")
                        .WithOne()
                        .HasForeignKey("Backend.DbModels.Coach", "CoachID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.DbModels.Branch", "Branch")
                        .WithMany("Coaches")
                        .HasForeignKey("Works_For_Branch")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.DbModels.Diet", b =>
                {
                    b.HasOne("Backend.DbModels.Client", "Client")
                        .WithOne()
                        .HasForeignKey("Backend.DbModels.Diet", "ClientAssignedToID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.DbModels.Coach", "Coach")
                        .WithMany("Diet")
                        .HasForeignKey("CoachCreatedID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.DbModels.Nutrition", "NutritionPlan")
                        .WithMany("Diet")
                        .HasForeignKey("NutritionPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.DbModels.Supplement", "Supplement")
                        .WithMany("Diet")
                        .HasForeignKey("SupplementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Coach");

                    b.Navigation("NutritionPlan");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Backend.DbModels.Equipment", b =>
                {
                    b.HasOne("Backend.DbModels.Branch", "Branch")
                        .WithMany("Equipments")
                        .HasForeignKey("BelongToBranchID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Backend.DbModels.Event", b =>
                {
                    b.HasOne("Backend.DbModels.Branch_Manager", "Branch_Manager")
                        .WithMany("Events")
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Branch_Manager");
                });

            modelBuilder.Entity("Backend.DbModels.Interested", b =>
                {
                    b.HasOne("Backend.DbModels.Client", "Client")
                        .WithMany("Interests")
                        .HasForeignKey("Client_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.DbModels.Session", "Session")
                        .WithMany("Interests")
                        .HasForeignKey("Session_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Backend.DbModels.InterviewTime", b =>
                {
                    b.HasOne("Backend.DbModels.Branch_Manager", "Manager")
                        .WithMany("Interview")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Backend.DbModels.Meeting", b =>
                {
                    b.HasOne("Backend.DbModels.Coach", "Coach")
                        .WithMany("meetings")
                        .HasForeignKey("CoachID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Backend.DbModels.Owner", b =>
                {
                    b.HasOne("Backend.DbModels.User", "User")
                        .WithOne()
                        .HasForeignKey("Backend.DbModels.Owner", "OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.DbModels.PerformWorkout", b =>
                {
                    b.HasOne("Backend.DbModels.Client", "Client")
                        .WithMany("Workouts")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.DbModels.Workout", "Workout")
                        .WithMany("Workouts")
                        .HasForeignKey("WorkoutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Backend.DbModels.Post", b =>
                {
                    b.HasOne("Backend.DbModels.Branch", "BranchPosted")
                        .WithMany("Post")
                        .HasForeignKey("BranchPostedID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BranchPosted");
                });

            modelBuilder.Entity("Backend.DbModels.Progress", b =>
                {
                    b.HasOne("Backend.DbModels.Client", "Client")
                        .WithMany("Progress")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Backend.DbModels.Rating", b =>
                {
                    b.HasOne("Backend.DbModels.Client", "Client")
                        .WithMany("Rates")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.DbModels.Coach", "Coach")
                        .WithMany("Rate")
                        .HasForeignKey("CoachID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Backend.DbModels.Recommendation", b =>
                {
                    b.HasOne("Backend.DbModels.Client", "Client")
                        .WithMany("Recommendations")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.DbModels.Nutrition", "Plan")
                        .WithMany("recommendations")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.DbModels.Supplement", "Supplement")
                        .WithMany("recommendations")
                        .HasForeignKey("SupplementID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");

                    b.Navigation("Plan");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Backend.DbModels.Report", b =>
                {
                    b.HasOne("Backend.DbModels.Branch_Manager", "Branch_Manager")
                        .WithMany("Reports")
                        .HasForeignKey("ManagerReportedID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Branch_Manager");
                });

            modelBuilder.Entity("Backend.DbModels.Skills", b =>
                {
                    b.HasOne("Backend.DbModels.Coach", "Coach")
                        .WithMany("Skills")
                        .HasForeignKey("CoachID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Backend.DbModels.SupplementsNeeded", b =>
                {
                    b.HasOne("Backend.DbModels.Nutrition", "NutritionPlan")
                        .WithMany("SupplementsNeeded")
                        .HasForeignKey("NutritionPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.DbModels.Supplement", "Supplement")
                        .WithMany("SupplementsNeeded")
                        .HasForeignKey("SupplementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionPlan");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Backend.DbModels.Workout", b =>
                {
                    b.HasOne("Backend.DbModels.Coach", "CreatedByCoach")
                        .WithMany("Workout")
                        .HasForeignKey("CreatedByCoachID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByCoach");
                });

            modelBuilder.Entity("Backend.DbModels.Branch", b =>
                {
                    b.Navigation("Branch_Managers");

                    b.Navigation("Coaches");

                    b.Navigation("Equipments");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Backend.DbModels.Branch_Manager", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Interview");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Backend.DbModels.Candidate", b =>
                {
                    b.Navigation("Application");
                });

            modelBuilder.Entity("Backend.DbModels.Client", b =>
                {
                    b.Navigation("ClientProgress");

                    b.Navigation("Interests");

                    b.Navigation("Progress");

                    b.Navigation("Rates");

                    b.Navigation("Recommendations");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("Backend.DbModels.Coach", b =>
                {
                    b.Navigation("ClientProgress");

                    b.Navigation("Clients");

                    b.Navigation("Diet");

                    b.Navigation("Rate");

                    b.Navigation("Skills");

                    b.Navigation("Workout");

                    b.Navigation("meetings");
                });

            modelBuilder.Entity("Backend.DbModels.Nutrition", b =>
                {
                    b.Navigation("Diet");

                    b.Navigation("SupplementsNeeded");

                    b.Navigation("recommendations");
                });

            modelBuilder.Entity("Backend.DbModels.Post", b =>
                {
                    b.Navigation("Application");
                });

            modelBuilder.Entity("Backend.DbModels.Session", b =>
                {
                    b.Navigation("Interests");
                });

            modelBuilder.Entity("Backend.DbModels.Supplement", b =>
                {
                    b.Navigation("Diet");

                    b.Navigation("SupplementsNeeded");

                    b.Navigation("recommendations");
                });

            modelBuilder.Entity("Backend.DbModels.User", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("Backend.DbModels.Workout", b =>
                {
                    b.Navigation("Workouts");
                });
#pragma warning restore 612, 618
        }
    }
}
